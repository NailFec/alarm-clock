#include <SevSeg.h>
#include "Button.h"

const int COLON_PIN = 13;
const int SPEAKER_PIN = A3;

Button button1(A0);    // 按钮1：学习模式开关
Button button2(A1);    // 按钮2：休息模式开关
Button button3(A2);    // 按钮3：查看总结

SevSeg sevseg;
Clock clock;

enum DisplayState {
  DisplayDefault,      // 默认显示当前时间
  DisplayStudy,        // 学习计时模式
  DisplayRest,         // 休息计时模式
  DisplayReview        // 总结模式
};

DisplayState displayState = DisplayDefault;
long lastStateChange = 0;
long studyTimerStart = 0;      // 学习计时开始时间
long restTimerStart = 0;       // 休息计时开始时间
long totalStudyTime = 0;       // 总学习时间（毫秒）
long totalRestTime = 0;        // 总休息时间（毫秒）

void changeDisplayState(DisplayState newValue) {
  displayState = newValue;
  lastStateChange = millis();
}

long millisSinceStateChange() {
  return millis() - lastStateChange;
}

void setColon(bool value) {
  digitalWrite(COLON_PIN, value ? LOW : HIGH);
}

// 显示默认时间（当前时间）
void displayDefault() {
  DateTime now = clock.now();
  bool blinkState = now.second() % 2 == 0;
  sevseg.setNumber(now.hour() * 100 + now.minute());
  setColon(blinkState);

  if (button1.pressed()) {
    studyTimerStart = millis();
    changeDisplayState(DisplayStudy);
  }
  else if (button2.pressed()) {
    restTimerStart = millis();
    changeDisplayState(DisplayRest);
  }
  else if (button3.pressed()) {
    changeDisplayState(DisplayReview);
  }
}

// 显示学习计时
void displayStudy() {
  long elapsed = (millis() - studyTimerStart) / 1000; // 转换为秒
  int minutes = elapsed / 60;
  int seconds = elapsed % 60;
  sevseg.setNumber(minutes * 100 + seconds);
  setColon(true);

  if (button1.pressed() || button2.pressed()) {
    totalStudyTime += (millis() - studyTimerStart);
    changeDisplayState(DisplayDefault);
  }
  // 按钮3在学习模式下无效
}

// 显示休息计时
void displayRest() {
  long elapsed = (millis() - restTimerStart) / 1000; // 转换为秒
  int minutes = elapsed / 60;
  int seconds = elapsed % 60;
  sevseg.setNumber(minutes * 100 + seconds);
  setColon(true);

  if (button1.pressed() || button2.pressed()) {
    totalRestTime += (millis() - restTimerStart);
    changeDisplayState(DisplayDefault);
  }
  // 按钮3在休息模式下无效
}

// 显示总结
void displayReview() {
  static bool showingStudy = true;
  static long lastSwitch = 0;

  if (showingStudy) {
    int studyMinutes = (totalStudyTime / 1000) / 60;
    int studySeconds = (totalStudyTime / 1000) % 60;
    sevseg.setNumber(studyMinutes * 100 + studySeconds);
    setColon(true);
    
    if (millisSinceStateChange() > 2000 && millis() - lastSwitch > 2000) {
      showingStudy = false;
      lastSwitch = millis();
    }
  } else {
    int restMinutes = (totalRestTime / 1000) / 60;
    int restSeconds = (totalRestTime / 1000) % 60;
    sevseg.setNumber(restMinutes * 100 + restSeconds);
    setColon(true);
    
    if (millis() - lastSwitch > 2000) {
      showingStudy = true;
      changeDisplayState(DisplayDefault);
    }
  }
}

void setup() {
  Serial.begin(115200);

  clock.begin();

  button1.begin();
  button2.begin();
  button3.begin();

  pinMode(COLON_PIN, OUTPUT);

  byte digits = 4;
  byte digitPins[] = {2, 3, 4, 5};
  byte segmentPins[] = {6, 7, 8, 9, 10, 11, 12};
  bool resistorsOnSegments = false;
  bool updateWithDelays = false;
  bool leadingZeros = true;
  bool disableDecPoint = true;
  sevseg.begin(DISPLAY_TYPE, digits, digitPins, segmentPins, resistorsOnSegments,
               updateWithDelays, leadingZeros, disableDecPoint);
  sevseg.setBrightness(90);
}

void loop() {
  sevseg.refreshDisplay();

  switch (displayState) {
    case DisplayDefault:
      displayDefault();
      break;

    case DisplayStudy:
      displayStudy();
      break;

    case DisplayRest:
      displayRest();
      break;

    case DisplayReview:
      displayReview();
      break;
  }
}