#include <SevSeg.h>
#include "Button.h"
#include "Clock.h"
#include "config.h"  // 若有自定义常量可以在此定义

const int COLON_PIN = 13;

Button button1(A0);  // 学习模式
Button button2(A1);  // 休息模式
Button button3(A2);  // 总结显示

Clock clock;
SevSeg sevseg;

enum Mode {
  Default,
  Study,
  Rest,
  Review,
};

Mode mode = Default;
unsigned long stateStartTime = 0;
unsigned long timerStart = 0;

unsigned long totalStudyTime = 0;
unsigned long totalRestTime = 0;

void changeMode(Mode newMode) {
  mode = newMode;
  stateStartTime = millis();
}

unsigned long elapsedTime() {
  return (millis() - timerStart) / 1000; // 返回秒数
}

void displaySeconds(unsigned long seconds) {
  unsigned int mins = seconds / 60;
  unsigned int secs = seconds % 60;
  sevseg.setNumber(mins * 100 + secs, -1);
  digitalWrite(COLON_PIN, LOW);
}

void displayTime() {
  DateTime now = clock.now();
  bool blink = now.second() % 2 == 0;
  sevseg.setNumber(now.hour() * 100 + now.minute());
  digitalWrite(COLON_PIN, blink ? LOW : HIGH);
}

void setup() {
  Serial.begin(115200);

  clock.begin();

  button1.begin();
  button2.begin();
  button3.begin();

  pinMode(COLON_PIN, OUTPUT);

  byte digits = 4;
  byte digitPins[] = {2, 3, 4, 5};
  byte segmentPins[] = {6, 7, 8, 9, 10, 11, 12};
  bool resistorsOnSegments = false;
  bool updateWithDelays = false;
  bool leadingZeros = true;
  bool disableDecPoint = true;
  sevseg.begin(COMMON_CATHODE, digits, digitPins, segmentPins, resistorsOnSegments,
               updateWithDelays, leadingZeros, disableDecPoint);
  sevseg.setBrightness(90);
}

void loop() {
  sevseg.refreshDisplay();

  button1.read();
  button2.read();
  button3.read();

  switch (mode) {
    case Default:
      displayTime();
      if (button1.pressed()) {
        timerStart = millis();
        changeMode(Study);
      } else if (button2.pressed()) {
        timerStart = millis();
        changeMode(Rest);
      } else if (button3.pressed()) {
        changeMode(Review);
      }
      break;

    case Study:
      displaySeconds(elapsedTime());
      if (button1.pressed() || button2.pressed()) {
        totalStudyTime += elapsedTime();
        changeMode(Default);
      }
      break;

    case Rest:
      displaySeconds(elapsedTime());
      if (button1.pressed() || button2.pressed()) {
        totalRestTime += elapsedTime();
        changeMode(Default);
      }
      break;

    case Review:
      // 显示学习总时间
      displaySeconds(totalStudyTime);
      if (millis() - stateStartTime > 2000) {
        // 显示休息总时间
        sevseg.setNumber(0);
        displaySeconds(totalRestTime);
      }
      if (millis() - stateStartTime > 4000) {
        changeMode(Default);
      }
      break;
  }
}
