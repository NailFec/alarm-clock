#include <SevSeg.h>
#include "Button.h"
#include "Clock.h"
#include "config.h"

const int COLON_PIN = 13;

Button studyButton(A0);    // 按钮1 - 开始学习计时
Button restButton(A1);     // 按钮2 - 开始休息计时
Button reviewButton(A2);   // 按钮3 - 查看总结

Clock clock;
SevSeg sevseg;

// 定义显示状态
enum DisplayState {
  DisplayDefault,  // 默认状态，显示当前时间
  DisplayStudy,    // 学习计时模式
  DisplayRest,     // 休息计时模式
  DisplayReview    // 查看总结模式
};

DisplayState displayState = DisplayDefault;
long lastStateChange = 0;
long timerStartTime = 0;  // 计时器开始时间

// 累计时间（毫秒）
unsigned long totalStudyTime = 0;
unsigned long totalRestTime = 0;
unsigned long currentSessionTime = 0;  // 当前会话时间

void changeDisplayState(DisplayState newValue) {
  displayState = newValue;
  lastStateChange = millis();
}

long millisSinceStateChange() {
  return millis() - lastStateChange;
}

// 设置冒号显示
void setColon(bool value) {
  digitalWrite(COLON_PIN, value ? LOW : HIGH);
}

// 显示当前时间
void displayTime() {
  DateTime now = clock.now();
  bool blinkState = now.second() % 2 == 0;
  sevseg.setNumber(now.hour() * 100 + now.minute());
  setColon(blinkState);
}

// 显示计时器时间（分钟和秒）
void displayTimer() {
  unsigned long elapsedTime = millis() - timerStartTime;
  int minutes = (elapsedTime / 1000) / 60;
  int seconds = (elapsedTime / 1000) % 60;
  
  sevseg.setNumber(minutes * 100 + seconds);
  
  // 让冒号常亮以区分计时器和时钟模式
  setColon(true);
}

// 默认状态处理
void defaultState() {
  displayTime();

  // 检查按钮输入
  if (studyButton.pressed()) {
    // 开始学习计时模式
    timerStartTime = millis();
    changeDisplayState(DisplayStudy);
  }
  
  if (restButton.pressed()) {
    // 开始休息计时模式
    timerStartTime = millis();
    changeDisplayState(DisplayRest);
  }
  
  if (reviewButton.pressed()) {
    // 进入总结模式
    changeDisplayState(DisplayReview);
  }
}

// 学习计时模式处理
void studyState() {
  displayTimer();
  
  // 检查按钮输入，停止计时
  if (studyButton.pressed() || restButton.pressed()) {
    // 计算本次学习时间并累加到总时间
    currentSessionTime = millis() - timerStartTime;
    totalStudyTime += currentSessionTime;
    
    // 返回默认模式
    changeDisplayState(DisplayDefault);
  }
  
  // 按钮3在此模式下无效
}

// 休息计时模式处理
void restState() {
  displayTimer();
  
  // 检查按钮输入，停止计时
  if (studyButton.pressed() || restButton.pressed()) {
    // 计算本次休息时间并累加到总时间
    currentSessionTime = millis() - timerStartTime;
    totalRestTime += currentSessionTime;
    
    // 返回默认模式
    changeDisplayState(DisplayDefault);
  }
  
  // 按钮3在此模式下无效
}

// 总结模式处理
void reviewState() {
  // 先显示学习总用时（分钟）
  if (millisSinceStateChange() < 2000) {
    unsigned long studyMinutes = totalStudyTime / 60000;
    sevseg.setNumber(studyMinutes);
    sevseg.setSegments(0, 0x40);  // 在第一位上显示S
  } 
  // 然后显示休息总用时
  else if (millisSinceStateChange() < 4000) {
    unsigned long restMinutes = totalRestTime / 60000;
    sevseg.setNumber(restMinutes);
    sevseg.setSegments(0, 0x50);  // 在第一位上显示r
  }
  // 返回默认模式
  else {
    changeDisplayState(DisplayDefault);
  }
  
  setColon(false);
}

void setup() {
  Serial.begin(115200);

  clock.begin();

  studyButton.begin();
  restButton.begin();
  reviewButton.begin();

  pinMode(COLON_PIN, OUTPUT);

  byte digits = 4;
  byte digitPins[] = {2, 3, 4, 5};
  byte segmentPins[] = {6, 7, 8, 9, 10, 11, 12};
  bool resistorsOnSegments = false;
  bool updateWithDelays = false;
  bool leadingZeros = true;
  bool disableDecPoint = true;
  sevseg.begin(DISPLAY_TYPE, digits, digitPins, segmentPins, resistorsOnSegments,
               updateWithDelays, leadingZeros, disableDecPoint);
  sevseg.setBrightness(90);
}

void loop() {
  sevseg.refreshDisplay();

  // 按钮状态更新
  studyButton.update();
  restButton.update();
  reviewButton.update();

  // 根据当前状态执行不同的逻辑
  switch (displayState) {
    case DisplayDefault:
      defaultState();
      break;

    case DisplayStudy:
      studyState();
      break;

    case DisplayRest:
      restState();
      break;

    case DisplayReview:
      reviewState();
      break;
  }
}